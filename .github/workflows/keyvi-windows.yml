# Build on Windows

name: Build keyvi on Windows

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{matrix.os}}
    name:  ${{ matrix.type }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        type: ['Release', 'Debug']
        os: ['windows-latest']
    env:
        BOOST_VERSION: "1.75.0"
        BOOST_DOWNLOAD: "1.75.0/boost_1_75_0-msvc-14.2-64.exe"
        BOOST_ROOT: "C:\\hostedtoolcache\\windows\\Boost"
        BOOST_LIBRARYDIR: "C:\\hostedtoolcache\\windows\\Boost\\lib64-msvc-14.2"
        BOOST_INCLUDEDIR: "C:\\hostedtoolcache\\windows\\Boost\\boost"
    steps:
      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v2.1.3
        with:
          path: "C:\\hostedtoolcache\\windows\\Boost"
          key: ${{ matrix.os }}-windows-boost-${{ env.BOOST_VERSION }}
      - name: Install Boost
        id: boost-env
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
            $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/${{ env.BOOST_DOWNLOAD }}"
            (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\boost.exe")
            Start-Process -Wait -FilePath "$env:TEMP\boost.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=C:\\hostedtoolcache\\windows\\Boost"
      - name: Cache Zlib
        id: cache-zlib
        uses: actions/cache@v2.1.3
        with:
          path: "C:\\hostedtoolcache\\windows\\zlib"
          key: ${{ matrix.os }}-${{ matrix.type }}-windows-zlib
      - name: Download zlib
        if: steps.cache-zlib.outputs.cache-hit != 'true'
        run: |
            $Url = "https://zlib.net/zlib-1.2.11.tar.gz"
            (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\zlib.tar.gz")
            7z.exe x "$env:TEMP\zlib.tar.gz" -o"$env:TEMP\zlibArchive" -y | Out-Null
            7z.exe x "$env:TEMP\zlibArchive" -o"C:\\hostedtoolcache\\windows\\zlib" -y | Out-Null
      - name: build zlib with cmake
        if: steps.cache-zlib.outputs.cache-hit != 'true'
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: 'C:\\hostedtoolcache/windows/zlib/zlib-1.2.11/CMakeLists.txt'
          buildWithCMake: true
          buildDirectory: 'C:\\hostedtoolcache/windows/zlib/zlib-1.2.11/build'
      - name: install zlib
        run: |
            cd C:\\hostedtoolcache\\windows\\zlib\\zlib-1.2.11\\build
            cmake --build . --config ${{ matrix.type }} --target INSTALL

      - name: Cache Snappy
        id: cache-snappy
        uses: actions/cache@v2.1.3
        with:
          path: "C:\\hostedtoolcache\\windows\\snappy"
          key: ${{ matrix.os }}-${{ matrix.type }}-windows-snappy
      - name: Download snappy
        if: steps.cache-snappy.outputs.cache-hit != 'true'
        run: |
            $Url = "https://github.com/google/snappy/archive/refs/tags/1.1.8.tar.gz"
            (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\snappy.tar.gz")
            7z.exe x "$env:TEMP\snappy.tar.gz" -o"$env:TEMP\snappyArchive" -y | Out-Null
            7z.exe x "$env:TEMP\snappyArchive" -o"C:\\hostedtoolcache\\windows\\snappy" -y | Out-Null
            dir "C:\\hostedtoolcache\\windows\\snappy\\snappy-1.1.8\\"
      - name: build snappy with cmake
        if: steps.cache-snappy.outputs.cache-hit != 'true'
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: 'C:\\hostedtoolcache/windows/snappy/snappy-1.1.8/CMakeLists.txt'
          buildWithCMake: true
          buildDirectory: 'C:\\hostedtoolcache/windows/snappy/snappy-1.1.8/build'
      - name: install snappy
        run: |
            cd C:\\hostedtoolcache\\windows\\snappy\\snappy-1.1.8\\build
            cmake --build . --config ${{ matrix.type }} --target INSTALL

      - name: checkout from git
        uses: actions/checkout@v2

      - name: build with cmake
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=${{ matrix.type }} -DBOOST_ROOT=${{ env.BOOST_ROOT }} -DBOOST_INCLUDEDIR=${{ env.BOOST_INCLUDEDIR }} -DBOOST_LIBRARYDIR=${{ env.BOOST_LIBRARYDIR }} -DSnappy_INCLUDE_DIR="C:\Program Files (x86)\Snappy\include" -DSnappy_LIBRARY="c:\Program Files (x86)\Snappy\lib\snappy.lib'
          buildWithCMake: false
          cmakeBuildType: ${{ matrix.type }}
          buildDirectory: '${{ github.workspace }}/build'
      - name: build
        run: |
            dir
            cd build
            cmake --build . --config ${{ matrix.type }}
            dir

      - name: Unit tests
        id: unit_tests
        run: |
            cd build\${{ matrix.type }}
            dir
            ./unit_test_all.exe --log_level=test_suite
